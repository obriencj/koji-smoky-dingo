import abc
from .. import BadDingo
from abc import ABCMeta
from typing import Any, Optional

class SifterError(BadDingo):
    complaint: str = ...

def ensure_symbol(value: Any, msg: Optional[Any] = ...): ...
def ensure_all_symbol(values: Any, expand: bool = ..., msg: Optional[Any] = ...): ...
def ensure_str(value: Any, msg: Optional[Any] = ...): ...
def ensure_int(value: Any, msg: Optional[Any] = ...): ...
def ensure_int_or_str(value: Any, msg: Optional[Any] = ...): ...
def ensure_all_int_or_str(values: Any, msg: Optional[Any] = ...): ...
def ensure_matcher(value: Any, msg: Optional[Any] = ...): ...
def ensure_all_matcher(values: Any, msg: Optional[Any] = ...): ...
def ensure_sieve(value: Any, msg: Optional[Any] = ...): ...
def ensure_all_sieve(values: Any, msg: Optional[Any] = ...): ...

class Sifter:
    key: Any = ...
    params: Any = ...
    def __init__(self, sieves: Any, source: Any, key: str = ..., params: Optional[Any] = ...) -> None: ...
    def sieve_exprs(self): ...
    def run(self, session: Any, info_dicts: Any): ...
    def __call__(self, session: Any, info_dicts: Any): ...
    def reset(self) -> None: ...
    def is_flagged(self, flagname: Any, data: Any): ...
    def set_flag(self, flagname: Any, data: Any) -> None: ...
    def get_cache(self, cachename: Any, key: Any): ...
    def get_info_cache(self, cachename: Any, data: Any): ...

class Sieve(metaclass=ABCMeta):
    @property
    @abc.abstractmethod
    def name(self) -> Any: ...
    aliases: Any = ...
    sifter: Any = ...
    key: Any = ...
    tokens: Any = ...
    options: Any = ...
    def __init__(self, sifter: Any, *tokens: Any, **options: Any) -> None: ...
    def __call__(self, session: Any, info_dicts: Any): ...
    def check(self, session: Any, info: Any) -> None: ...
    def prep(self, session: Any, info_dicts: Any) -> None: ...
    def run(self, session: Any, info_dicts: Any): ...
    def get_cache(self, key: Any): ...
    def get_info_cache(self, info: Any): ...

class MatcherSieve(Sieve, metaclass=abc.ABCMeta):
    def __init__(self, sifter: Any, *tokens: Any) -> None: ...

class SymbolSieve(Sieve, metaclass=abc.ABCMeta):
    def __init__(self, sifter: Any, *tokens: Any) -> None: ...

class IntStrSieve(Sieve, metaclass=abc.ABCMeta):
    def __init__(self, sifter: Any, *tokens: Any) -> None: ...

class Logic(Sieve, metaclass=ABCMeta):
    check: Any = ...
    def __init__(self, sifter: Any, *exprs: Any) -> None: ...

class LogicAnd(Logic):
    name: str = ...
    def run(self, session: Any, info_dicts: Any): ...

class LogicOr(Logic):
    name: str = ...
    def run(self, session: Any, info_dicts: Any): ...

class LogicNot(Logic):
    name: str = ...
    aliases: Any = ...
    def run(self, session: Any, info_dicts: Any): ...

class Flagger(LogicAnd):
    name: str = ...
    flag: Any = ...
    def __init__(self, sifter: Any, flag: Any, *exprs: Any) -> None: ...
    def run(self, session: Any, info_dicts: Any): ...

class VariadicSieve(Sieve, metaclass=ABCMeta):
    def __new__(cls, sifter: Any, *exprs: Any): ...
    token: Any = ...
    def __init__(self, sifter: Any, token: Any) -> None: ...

class Flagged(VariadicSieve):
    name: str = ...
    aliases: Any = ...
    def __init__(self, sifter: Any, name: Any) -> None: ...
    def check(self, _session: Any, info: Any): ...

class ItemSieve(VariadicSieve, metaclass=ABCMeta):
    @property
    @abc.abstractmethod
    def field(self) -> Any: ...
    def __init__(self, sifter: Any, pattern: Optional[Any] = ...) -> None: ...
    def check(self, session: Any, info: Any): ...

class ItemPathSieve(Sieve):
    name: str = ...
    path: Any = ...
    def __init__(self, sifter: Any, path: Any, *values: Any) -> None: ...
    def check(self, _session: Any, data: Any): ...

DEFAULT_SIEVES: Any

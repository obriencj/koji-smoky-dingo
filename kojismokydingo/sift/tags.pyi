import abc
from . import ItemSieve, MatcherSieve, Sieve, SymbolSieve, VariadicSieve
from .common import CacheMixin
from abc import abstractmethod
from typing import Any, Optional

class NameSieve(ItemSieve):
    name: str = ...
    field: str = ...

class ArchSieve(MatcherSieve):
    name: str = ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class ExactArchSieve(SymbolSieve):
    name: str = ...
    def get_info_cache(self, tinfo: Any): ...
    def check(self, session: Any, taginfo: Any): ...

class LockedSieve(Sieve):
    name: str = ...
    def __init__(self, sifter: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class PermissionSieve(MatcherSieve):
    name: str = ...
    def check(self, session: Any, taginfo: Any): ...

class TargetSieve(MatcherSieve, metaclass=abc.ABCMeta):
    @abstractmethod
    def prep_targets(self, session: Any, tagids: Any) -> Any: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class BuildTagSieve(TargetSieve):
    name: str = ...
    def prep_targets(self, session: Any, tagids: Any): ...

class DestTagSieve(TargetSieve):
    name: str = ...
    def prep_targets(self, session: Any, tagids: Any): ...

class InheritanceSieve(MatcherSieve, metaclass=abc.ABCMeta):
    @abstractmethod
    def prep_inheritance(self, session: Any, tagids: Any) -> Any: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class HasParentSieve(InheritanceSieve):
    name: str = ...
    aliases: Any = ...
    def prep_inheritance(self, session: Any, tagids: Any): ...

class HasAncestorSieve(InheritanceSieve):
    name: str = ...
    aliases: Any = ...
    def prep_inheritance(self, session: Any, tagids: Any): ...

class HasChildSieve(InheritanceSieve):
    name: str = ...
    aliases: Any = ...
    def prep_inheritance(self, session: Any, tagids: Any): ...

class HasDescendantSieve(InheritanceSieve):
    name: str = ...
    aliases: Any = ...
    def prep_inheritance(self, session: Any, tagids: Any): ...

class NVRSieve(VariadicSieve, metaclass=abc.ABCMeta):
    build_id: Any = ...
    pkg_name: Any = ...
    def __init__(self, sifter: Any, nvr: Optional[Any] = ...) -> None: ...
    @abstractmethod
    def prep_tagged(self, session: Any, pkgname: Any, tagids: Any) -> Any: ...
    @abstractmethod
    def prep_count(self, session: Any, tagids: Any) -> Any: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class TaggedSieve(NVRSieve):
    name: str = ...
    def prep_tagged(self, session: Any, pkgname: Any, tagids: Any): ...
    def prep_count(self, session: Any, tagids: Any): ...

class LatestSieve(NVRSieve):
    name: str = ...
    def prep_tagged(self, session: Any, pkgname: Any, tagids: Any): ...
    def prep_count(self, session: Any, tagids: Any): ...

class CompareLatestSieve(Sieve):
    name: str = ...
    pkgname: Any = ...
    op: Any = ...
    epoch: Any = ...
    version: Any = ...
    release: Any = ...
    def __init__(self, sifter: Any, pkgname: Any, op: str = ..., ver: str = ...) -> None: ...
    def prep(self, session: Any, taginfos: Any): ...
    def check(self, session: Any, taginfo: Any): ...

class PkgListSieve(SymbolSieve, CacheMixin, metaclass=abc.ABCMeta):
    def __init__(self, sifter: Any, pkgname: Any, *pkgnames: Any) -> None: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...

class PkgAllowedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, taginfo: Any): ...

class PkgBlockedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, taginfo: Any): ...

class PkgUnlistedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, taginfo: Any): ...

class GroupSieve(SymbolSieve, CacheMixin):
    name: str = ...
    def __init__(self, sifter: Any, group: Any, *groups: Any) -> None: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

class GroupPkgSieve(SymbolSieve, CacheMixin):
    name: str = ...
    group: Any = ...
    require_all: Any = ...
    def __init__(self, sifter: Any, group: Any, pkg: Any, *pkgs: Any, require_all: bool = ...) -> None: ...
    def prep(self, session: Any, taginfos: Any) -> None: ...
    def check(self, session: Any, taginfo: Any): ...

DEFAULT_TAG_INFO_SIEVES: Any

def tag_info_sieves(): ...
def tag_info_sifter(source: Any, params: Optional[Any] = ...): ...
def sift_tags(session: Any, src_str: Any, tag_infos: Any, params: Optional[Any] = ...): ...
def sift_tagnames(session: Any, src_str: Any, names: Any, params: Optional[Any] = ...): ...

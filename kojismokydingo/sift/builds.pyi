import abc
from . import IntStrSieve, ItemSieve, MatcherSieve, Sieve
from .common import CacheMixin
from abc import abstractmethod
from typing import Any, Optional

class NVRSieve(ItemSieve):
    name: str = ...
    field: str = ...

class NameSieve(ItemSieve):
    name: str = ...
    field: str = ...

class VersionSieve(ItemSieve):
    name: str = ...
    field: str = ...

class ReleaseSieve(ItemSieve):
    name: str = ...
    field: str = ...

class EpochSieve(ItemSieve):
    name: str = ...
    field: str = ...

class StateSieve(Sieve):
    name: str = ...
    states: Any = ...
    def __init__(self, sifter: Any, name: Any, *names: Any) -> None: ...
    def check(self, session: Any, info: Any): ...

class OwnerSieve(IntStrSieve):
    name: str = ...
    def __init__(self, sifter: Any, user: Any, *users: Any) -> None: ...
    def prep(self, session: Any, _build_infos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class ImportedSieve(Sieve):
    name: str = ...
    def check(self, session: Any, binfo: Any): ...

class EVRCompare(Sieve, metaclass=abc.ABCMeta):
    token: Any = ...
    epoch: Any = ...
    version: Any = ...
    release: Any = ...
    op: Any = ...
    def __init__(self, sifter: Any, version: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class EVRCompareEQ(EVRCompare):
    name: str = ...

class EVRCompareNE(EVRCompare):
    name: str = ...

class EVRCompareGT(EVRCompare):
    name: str = ...

class EVRCompareGE(EVRCompare):
    name: str = ...

class EVRCompareLT(EVRCompare):
    name: str = ...

class EVRCompareLE(EVRCompare):
    name: str = ...

class TaggedSieve(MatcherSieve):
    name: str = ...
    def prep(self, session: Any, binfos: Any): ...
    def check(self, session: Any, binfo: Any): ...

class InheritedSieve(IntStrSieve):
    name: str = ...
    tag_ids: Any = ...
    def __init__(self, sifter: Any, tagname: Any, *tagnames: Any) -> None: ...
    def get_info_cache(self, binfo: Any): ...
    def prep(self, session: Any, binfos: Any): ...
    def check(self, session: Any, binfo: Any): ...

class PkgListSieve(IntStrSieve, CacheMixin, metaclass=abc.ABCMeta):
    tag_ids: Any = ...
    def __init__(self, sifter: Any, tagname: Any, *tagnames: Any) -> None: ...
    def prep(self, session: Any, binfos: Any) -> None: ...

class PkgAllowedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, binfo: Any): ...

class PkgBlockedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, binfo: Any): ...

class PkgUnlistedSieve(PkgListSieve):
    name: str = ...
    def check(self, session: Any, binfo: Any): ...

class TypeSieve(MatcherSieve):
    name: str = ...
    def __init__(self, sifter: Any, btype: Any, *btypes: Any) -> None: ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class CGImportedSieve(MatcherSieve):
    name: str = ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class LatestSieve(IntStrSieve, CacheMixin):
    name: str = ...
    tag_ids: Any = ...
    def __init__(self, sifter: Any, tagname: Any, *tagnames: Any) -> None: ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class LatestMavenSieve(IntStrSieve, CacheMixin):
    name: str = ...
    tag_ids: Any = ...
    def __init__(self, sifter: Any, tagname: Any, *tagnames: Any) -> None: ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class SignedSieve(MatcherSieve):
    name: str = ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def check(self, session: Any, binfo: Any): ...

class CompareLatestSieve(CacheMixin, metaclass=abc.ABCMeta):
    op: Any = ...
    tag_id: Any = ...
    def __init__(self, sifter: Any, comparison: Any, tag: Any) -> None: ...
    @abstractmethod
    def comparison_key(self, binfo: Any) -> Any: ...
    def prep(self, session: Any, binfos: Any) -> None: ...
    def comparison(self, binfo: Any, latest: Any): ...

class CompareLatestIDSieve(CompareLatestSieve):
    name: str = ...
    comparison_key: Any = ...
    def check(self, session: Any, binfo: Any): ...

class CompareLatestNVRSieve(CompareLatestSieve):
    name: str = ...
    comparison_key: Any = ...
    def check(self, session: Any, binfo: Any): ...

DEFAULT_BUILD_INFO_SIEVES: Any

def build_info_sieves(): ...
def build_info_sifter(source: Any, params: Optional[Any] = ...): ...
def sift_builds(session: Any, src_str: Any, build_infos: Any, params: Optional[Any] = ...): ...
def sift_nvrs(session: Any, src_str: Any, nvrs: Any, params: Optional[Any] = ...): ...

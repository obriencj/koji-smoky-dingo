from . import AnonSmokyDingo, TagSmokyDingo
from .. import BadDingo, FeatureUnavailable as FeatureUnavailable
from .sift import TagSifting
from typing import Any, Optional

SORT_BY_ID: str
SORT_BY_NAME: str

class BadSwap(BadDingo):
    complaint: str = ...

class NoSuchInheritance(BadDingo):
    complaint: str = ...

class NoSuchTagExtra(BadDingo):
    complaint: str = ...

class NoSuchMacro(NoSuchTagExtra):
    complaint: str = ...

class NoSuchEnvVar(NoSuchTagExtra):
    complaint: str = ...

def cli_affected_targets(session: Any, tag_list: Any, build_tags: bool = ..., info: bool = ..., quiet: Optional[Any] = ...) -> None: ...

class AffectedTargets(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_renum_tag(session: Any, tagname: Any, begin: int = ..., step: int = ..., verbose: bool = ..., test: bool = ...) -> None: ...

class RenumTagInheritance(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def validate(self, parser: Any, options: Any) -> None: ...
    def handle(self, options: Any): ...

def cli_swap_inheritance(session: Any, tagname: Any, old_parent: Any, new_parent: Any, verbose: bool = ..., test: bool = ...) -> None: ...

class SwapTagInheritance(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_list_rpm_macros(session: Any, tagname: Any, target: bool = ..., quiet: Optional[Any] = ..., defn: bool = ..., json: bool = ...) -> None: ...

class ListRPMMacros(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_set_rpm_macro(session: Any, tagname: Any, macro: Any, value: Optional[Any] = ..., remove: bool = ..., block: bool = ..., target: bool = ...) -> None: ...

class SetRPMMacro(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

class RemoveRPMMacro(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

class BlockRPMMacro(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_set_env_var(session: Any, tagname: Any, var: Any, value: Optional[Any] = ..., remove: bool = ..., block: bool = ..., target: bool = ...) -> None: ...

class SetEnvVar(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def validate(self, parser: Any, options: Any) -> None: ...
    def handle(self, options: Any): ...

class RemoveEnvVar(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

class BlockEnvVar(TagSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_list_env_vars(session: Any, tagname: Any, target: bool = ..., quiet: Optional[Any] = ..., defn: bool = ..., json: bool = ...) -> None: ...

class ListEnvVars(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_list_tag_extras(session: Any, tagname: Any, target: bool = ..., blocked: bool = ..., quiet: Optional[Any] = ..., json: bool = ...): ...

class ListTagExtras(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_filter_tags(session: Any, tag_list: Any, search: Optional[Any] = ..., regex: Optional[Any] = ..., tag_sifter: Optional[Any] = ..., sorting: Optional[Any] = ..., outputs: Optional[Any] = ..., strict: bool = ...) -> None: ...

class FilterTags(AnonSmokyDingo, TagSifting):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

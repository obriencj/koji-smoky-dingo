import abc
from abc import ABCMeta, abstractmethod
from typing import Any, Optional

def pretty_json(data: Any, output: Optional[Any] = ..., **pretty: Any) -> None: ...
def find_action(parser: Any, key: Any): ...
def remove_action(parser: Any, key: Any) -> None: ...
def resplit(arglist: Any, sep: str = ...): ...
def open_output(filename: str = ..., append: Optional[Any] = ...) -> None: ...
def clean_lines(lines: Any, skip_comments: bool = ...): ...
def read_clean_lines(filename: str = ..., skip_comments: bool = ...): ...

printerr: Any

def tabulate(headings: Any, data: Any, key: Optional[Any] = ..., sorting: int = ..., quiet: Optional[Any] = ..., out: Optional[Any] = ...) -> None: ...
def space_normalize(txt: Any): ...
def int_or_str(value: Any): ...

class SmokyDingo(metaclass=ABCMeta):
    group: str = ...
    description: str = ...
    permission: Optional[str] = ...
    name: Any = ...
    __name__: Any = ...
    exported_cli: bool = ...
    __doc__: Any = ...
    config: Any = ...
    goptions: Any = ...
    session: Any = ...
    def __init__(self, name: Optional[str]=...) -> None: ...
    def get_plugin_config(self, key: Any, default: Optional[Any] = ...): ...
    def parser(self): ...
    def arguments(self, parser: Any) -> None: ...
    def validate(self, parser: Any, options: Any) -> None: ...
    def pre_handle(self, options: Any) -> None: ...
    @abstractmethod
    def handle(self, options: Any) -> Any: ...
    def activate(self): ...
    def deactivate(self) -> None: ...
    def __call__(self, goptions: Any, session: Any, args: Any): ...

class AnonSmokyDingo(SmokyDingo, metaclass=abc.ABCMeta):
    group: str = ...
    permission: Optional[str] = ...
    __name__: Any = ...
    def __init__(self, name: Optional[Any] = ...) -> None: ...
    def activate(self) -> None: ...
    def pre_handle(self, options: Any) -> None: ...

class AdminSmokyDingo(SmokyDingo, metaclass=abc.ABCMeta):
    group: str = ...
    permission: str = ...

class TagSmokyDingo(SmokyDingo, metaclass=abc.ABCMeta):
    group: str = ...
    permission: str = ...

class TargetSmokyDingo(SmokyDingo, metaclass=abc.ABCMeta):
    group: str = ...
    permission: str = ...

class HostSmokyDingo(SmokyDingo, metaclass=abc.ABCMeta):
    group: str = ...
    permission: str = ...

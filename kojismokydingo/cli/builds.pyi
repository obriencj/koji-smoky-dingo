from . import AnonSmokyDingo, TagSmokyDingo
from .sift import BuildSifting
from typing import Any, Optional

def cli_bulk_tag_builds(session: Any, tagname: Any, nvrs: Any, sorting: Optional[Any] = ..., owner: Optional[Any] = ..., inherit: bool = ..., force: bool = ..., notify: bool = ..., create: bool = ..., verbose: bool = ..., strict: bool = ...): ...

class BulkTagBuilds(TagSmokyDingo):
    group: str = ...
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_bulk_untag_builds(session: Any, tagname: Any, nvrs: Any, force: bool = ..., notify: bool = ..., verbose: bool = ..., strict: bool = ...) -> None: ...

class BulkUntagBuilds(TagSmokyDingo):
    group: str = ...
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_bulk_move_builds(session: Any, srctag: Any, desttag: Any, nvrs: Any, sorting: Optional[Any] = ..., owner: Optional[Any] = ..., inherit: bool = ..., force: bool = ..., notify: bool = ..., create: bool = ..., verbose: bool = ..., strict: bool = ...): ...

class BulkMoveBuilds(TagSmokyDingo):
    group: str = ...
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

class BuildFiltering(BuildSifting):
    def filtering_arguments(self, parser: Any): ...
    def get_filter(self, session: Any, options: Any): ...

def cli_list_components(session: Any, nvr_list: Any, tags: Any = ..., inherit: bool = ..., latest: bool = ..., build_filter: Optional[Any] = ..., build_sifter: Optional[Any] = ..., sorting: Optional[Any] = ..., outputs: Optional[Any] = ...) -> None: ...

class ListComponents(AnonSmokyDingo, BuildFiltering):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_filter_builds(session: Any, nvr_list: Any, tags: Any = ..., inherit: bool = ..., latest: bool = ..., build_filter: Optional[Any] = ..., build_sifter: Optional[Any] = ..., sorting: Optional[Any] = ..., outputs: Optional[Any] = ..., strict: bool = ...) -> None: ...

class FilterBuilds(AnonSmokyDingo, BuildFiltering):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_list_btypes(session: Any, nvr: Optional[Any] = ..., json: bool = ..., quiet: bool = ...) -> None: ...

class ListBTypes(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

def cli_list_cgs(session: Any, nvr: Optional[Any] = ..., json: bool = ..., quiet: bool = ...) -> None: ...

class ListCGs(AnonSmokyDingo):
    description: str = ...
    def arguments(self, parser: Any): ...
    def handle(self, options: Any): ...

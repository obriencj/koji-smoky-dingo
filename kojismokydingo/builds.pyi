

from koji import ClientSession
from typing import Any, Callable, Optional

from .types import BuildInfo, BuildInfos, BuildState


class NEVRCompare:
    n: str = ...
    evr: tuple[str] = ...

    def __init__(
            self,
            name: str,
            epoch: Optional[str],
            version: Optional[str],
            release: Optional[str]) -> None:
        ...

    def __cmp__(self, other: NEVRCompare) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...


class BuildNEVRCompare(NEVRCompare):
    build: Any = ...
    def __init__(self, binfo: BuildInfo) -> None: ...


gavgetter: Callable[[tuple[str]], BuildInfo]


def build_nvr_sort(
        build_infos: BuildInfos,
        dedup: bool=...) -> BuildInfos:
    ...

def build_id_sort(
        build_infos: BuildInfos,
        dedup: bool=...) -> BuildInfos:
    ...

def build_dedup(
        build_infos: BuildInfos) -> BuildInfos:
    ...

def iter_bulk_move_builds(
        session: ClientSession,
        srctag: Any,
        dsttag: Any,
        build_infos: Any,
        force: bool = ...,
        notify: bool = ...,
        size: int = ...,
        strict: bool = ...) -> None:
    ...

def bulk_move_builds(session: Any, srctag: Any, dsttag: Any, build_infos: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...
def bulk_move_nvrs(session: Any, srctag: Any, dsttag: Any, nvrs: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...
def iter_bulk_tag_builds(session: Any, tag: Any, build_infos: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...) -> None: ...
def bulk_tag_builds(session: Any, tag: Any, build_infos: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...
def bulk_tag_nvrs(session: Any, tag: Any, nvrs: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...
def iter_bulk_untag_builds(session: Any, tag: Any, build_infos: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...) -> None: ...
def bulk_untag_builds(session: Any, tag: Any, build_infos: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...
def bulk_untag_nvrs(session: Any, tag: Any, nvrs: Any, force: bool = ..., notify: bool = ..., size: int = ..., strict: bool = ...): ...

def iter_latest_maven_builds(session: Any, tag: Any, pkg_names: Optional[Any] = ..., inherit: bool = ...): ...
def latest_maven_builds(session: Any, tag: Any, pkg_names: Optional[Any] = ..., inherit: bool = ...): ...
def decorate_builds_maven(session: Any, build_infos: Any): ...
def decorate_builds_btypes(session: Any, build_infos: Any, with_fields: bool = ...): ...
def decorate_builds_cg_list(session: Any, build_infos: Any): ...
def filter_builds_by_tags(session: Any, build_infos: Any, limit_tag_ids: Any = ..., lookaside_tag_ids: Any = ...): ...
def filter_builds_by_state(build_infos: BuildInfos, state: BuildState=...) -> BuildInfos: ...
def filter_imported_builds(build_infos: Any, by_cg: Any = ..., negate: bool = ...) -> None: ...
def gather_buildroots(session: Any, build_ids: Any): ...
def gather_rpm_sigkeys(session: Any, build_ids: Any): ...
def gather_wrapped_builds(session: Any, task_ids: Any, results: Optional[Any] = ...): ...
def gather_component_build_ids(session: Any, build_ids: Any, btypes: Optional[Any] = ...): ...

class BuildFilter:
    def __init__(self, session: Any, limit_tag_ids: Optional[Any] = ..., lookaside_tag_ids: Optional[Any] = ..., imported: Optional[Any] = ..., cg_list: Optional[Any] = ..., btypes: Optional[Any] = ..., state: Optional[Any] = ...) -> None: ...
    def filter_by_tags(self, build_infos: Any): ...
    def filter_by_btype(self, build_infos: Any): ...
    def filter_imported(self, build_infos: Any): ...
    def filter_by_state(self, build_infos: Any): ...
    def __call__(self, build_infos: Any): ...
